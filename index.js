// Generated by CoffeeScript 1.6.2
var $, StretchDiv,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

StretchDiv = (function() {
  function StretchDiv(options) {
    if (options == null) {
      options = {};
    }
    this.inner = __bind(this.inner, this);
    this.resize = __bind(this.resize, this);
    this.bind = __bind(this.bind, this);
    this.div_dom = $(options.div);
    this.img_dom = options.img ? $(options.img) : false;
    this.inners = [];
    this.resize();
    this.bind();
  }

  StretchDiv.prototype.bind = function() {
    return $(window).resize(this.resize);
  };

  StretchDiv.prototype.resize = function() {
    var container, container_ratio, div, inner, padding_left, padding_top, _i, _len, _ref, _results,
      _this = this;
    this.div_dom.height(window.innerHeight);
    this.div_dom.width(window.innerWidth);
    if (this.img_dom) {
      if (this.img_dom.width() > 0 && this.img_dom.height() > 0) {
        if (this.image_ratio == null) {
          this.image_ratio = this.img_dom.width() / this.img_dom.height();
        }
        container = this.div_dom;
        container_ratio = container.width() / container.height();
        if (this.image_ratio >= container_ratio) {
          this.img_dom.css('height', '100%');
          this.img_dom.css('width', 'auto');
          padding_top = 0.0;
          padding_left = -1 * (this.image_ratio * container.height() - container.width()) / 2;
        } else {
          this.img_dom.css('height', 'auto');
          this.img_dom.css('width', '100%');
          padding_top = -1 * ((container.width() / this.image_ratio) - container.height()) / 2;
          padding_left = 0.0;
        }
        this.img_dom.offset({
          top: padding_top,
          left: padding_left
        });
        _ref = this.inners;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          inner = _ref[_i];
          div = inner.div;
          div.height(this.img_dom.height() * inner.height);
          div.width(this.img_dom.width() * inner.width);
          _results.push(div.offset({
            left: this.img_dom.width() * inner.left + padding_left,
            top: (this.img_dom.height() * inner.top) + padding_top
          }));
        }
        return _results;
      } else {
        return this.img_dom.bind("load", function() {
          return _this.resize();
        });
      }
    }
  };

  StretchDiv.prototype.inner = function(options) {
    if (options == null) {
      options = {};
    }
    this.inners.push(options);
    return this.resize();
  };

  return StretchDiv;

})();

module.exports = StretchDiv;
